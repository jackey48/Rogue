Tile system: Drawing pictures every # units away. 

Basic movement: Draw player on 0,0 with size # x #

package finalproject;
import java.awt.Graphics;

public class GameUI extends javax.swing.JFrame {
Graphics g;

    public GameUI() {
        initComponents();
        g = jPanel1.getGraphics();
        jPanel1.paintComponents(g);
    }
    
On window form {
  g.paintPlayer(0,0,#,#);
}

On key press right{
  //Read by position 2D array as [1][0]
  paint player at position #,0 with size # x #
  repaint player at 0,0 with nothing
  
  //2D arrays can only be read as whole number, equation to seperate x and y coordinates found
  %200 gives x coordinates, removing x then /200 gives y coordinates
  

}

Inventory functions as a 2D array containing strings that are the items, string contains two substrings, one of it's name and one of it's bonus
Program parses for second part when reevaluating stats. Clicking on a radio button checks whether its a sword or armour then changes the values appropriately.
Armour and weapons are tied to a value in the array so it knows where to look.


Current Matthew Task: Checking the 8 tiles around the player and printing them by finding their symbol in the text file map and useing that to determine 
what colour to draw. Using nested for loop, checks coordinates around players current location and prints their assigned colour.

Current Ka Hei Task: Creating and differenciating enemy types. Generating enemies can be done thorugh a random number generator and depending on the number
given, it generates that enemy. Fixing combat loop/creating a real combat loop is required as current combat is dependant on specifically one enemy object being fought.
Combat loop method can check which enemy is fought before combat starts.

int i is given
if(1)
enemy = there

bad1.actionChoose()

else if (2)
elite
else if (3)
boss
