class Stats {
  Random rand = new Random();
  Scanner in = new Scanner(System.in);
  String name;
  int maxHealth;
  int currentHealth;
  int defence;
  int attack;
  
  public Stats(String n, int mh, int d, int a) {
    name = n;
    maxHealth = mh;
    currentHealth = maxHealth;
    defence = d;
    attack = a;
  }

public String getName(){
  return name;
}
  
  public int getMaxHealth() {
    return maxHealth;
  }

  public int getCurrentHealth() {
    return currentHealth;
  }
  
  public int getDefence() {
    return defence;
  }

  public int getAttack() {
    return attack;
  }

  public int attack() {
    int max = (int)(attack * 1.2);
    int min = (int)(attack * 0.8);
    if (rand.nextInt(20) == 0) {
      System.out.print("Critical Hit!");
      return 2*(rand.nextInt(max - min) + min);
    }
    else {
      return rand.nextInt(max - min) + min;
    }
  }
  
  public void damaged(int d) {
    int damage = d;
    if (damage > defence) { 
      System.out.println(getName()+" takes "+(damage-defence)+" damage!");
      currentHealth -= (damage - defence);
    }
    else{
      System.out.println(getName()+" takes no damage!");
    }
  }
}

//Graphics 1, failed
import java.awt.Graphics2D;
    private void jButton1MouseClicked(java.awt.event.MouseEvent evt) {                                      
        // TODO add your handling code here:
        Graphics2D gfx = (Graphics2D)jPanel1.getGraphics();
        gfx.drawGraphic(0,0,10,10);
        //Every tile is 10 x 10 units
 
    }  

//Graphics 2, succeeded
//Includes working action
public class GameUI extends javax.swing.JFrame {
    Graphics g;
    Action UpAction;
    /**
     * Creates new form GameUI
     */
    public GameUI() {
        initComponents();
        
        //Setting Graphics
        g = jPanel1.getGraphics();
        jPanel1.paintComponents(g);
        
        //Creating Key Binds
        UpAction = new UpAction();
        
        jPanel1.getInputMap().put(KeyStroke.getKeyStroke("UP"), "upAction");
        jPanel1.getActionMap().put("upAction", UpAction);
        
    }
    public class UpAction extends AbstractAction{
        
        @Override
        public void actionPerformed(ActionEvent e){
            g.drawRect(0,0,10,20);
        }
    }

//Translating Positions on 2D array
class Main {
public static void main(String[] args){
  int coord = 0;
  int[][] map = new int[20][20];
  for (int row = 0; row < map.length; row++)
  {
	  for (int col = 0; col < map[row].length; col++)
    {
      	map[row][col] = coord;
        coord += 10;
    }
  }
  int test;
  System.out.println(map[5][10]);
  test = map[5][10]%200;
  System.out.println(test + " Is X");
  test = (map[5][10] - test)/20;
  System.out.println(test + " Is Y");
  
}
}
//Fixed Position calculator (Now works with varying and non symmetrical widths and lengths)
class Main {
public static void main(String[] args){
  int coord = 0;
  int length = 20;
  int width = 20;
  int[][] map = new int[length][width];
  for (int row = 0; row < map.length; row++)
  {
	  for (int col = 0; col < map[row].length; col++)
    {
      	map[row][col] = coord;
        coord += 10;
    }
  }
  int test;
  System.out.println(map[5][10]);
  test = map[5][10]%(width*10);
  System.out.println(test + " Is X");
  test = (map[5][10] - test)/(width);
  System.out.println(test + " Is Y");
  
}
}

//Code for replacing event tiles after use
reader = new BufferedReader(new FileReader("map1player.txt"));
            for (int i = 0; i <= (playerY + y); i ++) {
                oldString = reader.readLine();
            }
            reader.close();
	    //Create new string replacing players tile with 'o' for open
            newString = oldString.substring(0,(playerX + x))+'o'+oldString.substring(playerX + x + 1);
	    
// What happens when you move	    
jPanel1.getInputMap().put(KeyStroke.getKeyStroke("UP"), "upAction");
        jPanel1.getActionMap().put("upAction", UpAction);
	
    public class UpAction extends AbstractAction{
        
        @Override
        public void actionPerformed(ActionEvent e){
            char tileColour = events.mapReader(CoordsX, CoordsY-1);
            int mapValue = map[player.positionY][player.positionX];
            if (combat == false) {
	    //Tile reading section, reads map text file and depending on the letter, determines its tile
	    \*
	    W = walls
	    o = open
	    k = enemy
	    t = treasure
	    */
                switch (tileColour) {
                    case('W'):
                        g.setColor(Color.black);
                        g.fillRect(player.getX(mapValue),player.getY(mapValue,player.getX(mapValue))-10,10,10);
                        break;
                    case('o'):
                        g.setColor(Color.green);
                        g.fillRect(player.getX(mapValue),player.getY(mapValue,player.getX(mapValue)),10,10);
                        CoordsY--;
                        player.setPosY(CoordsY);
                        mapValue = map[player.positionY][player.positionX];
                        g.setColor(Color.gray);
                        g.fillRect(player.getX(mapValue),player.getY(mapValue,player.getX(mapValue)),10,10);
                        break;
                    case('k'):
                        g.setColor(Color.red);
                        g.fillRect(player.getX(mapValue),player.getY(mapValue,player.getX(mapValue))-10,10,10);
                        bad1.generateStats(player.getLevel());
                        combat = true;
                        combatX = 0;
                        combatY = -1;
                        eventTextBox.append("You encounter an enemy! \n");
                        updateUI();
                        break;
                    case('t'): 
                        g.setColor(Color.yellow);
                        g.fillRect(player.getX(mapValue),player.getY(mapValue,player.getX(mapValue))+10,10,10);
                        in.addItem("Sword", "+2 ATT");
                        events.mapLineReplacer(0, -1, CoordsX, CoordsY);
                        updateUI();
                } 
            }
        }
    }
   
    //Updated Enemy class v.1
    public class EnemyStats extends Stats{
    Random rand = new Random();
    int expValue;
    int CR;
    String[] moveList;
    
    public EnemyStats(String n, int mh, int d, int a) {
        super(n, mh, d, a);
     }
    //Never used but could be useful
    public int getExpValue() {
        return expValue;
    }
    
    public void generateLesserEnemyType(int level){
        CR = level;
	//Generates random number for random enemy
        int enemyIndex = (int)(Math.random()*(3 - 1 + 1) + 1);
        enemyIndex = 2;
        switch (enemyIndex) {
            case 1:
	    //changes current enemy stats to that of Moblin
                generateMoblin();
                break;
            case 2:  
                generateGodlin();
                break;
            case 3:
                generateAoblin();
                break;
        }

    }
    
    private void generateMoblin(){
        maxHealth = 10 + CR;
        setCurrentHealth();
        attack = 3 + (int)(CR/2);
        defence = 1 + (int)(CR/4);
        name = "Moblin The Goblin";
        expValue = 12 + CR;
        String setList[] = {"a","dh"};
	//Didn't know a better way to change the entire array
        moveList = setList;
    }
    
    private void generateGodlin() {
        maxHealth = 100 * (int)(CR);
        setCurrentHealth();
        attack = 20 * CR;
        defence = 0;
        name = "Godlin, the Second Elden Lord";
        expValue = 5000;
        String setList[] = {"a","dh"};
        moveList = setList;
    }
    
    private void generateAoblin() {
        maxHealth = 8 + (int)(CR/2);
        setCurrentHealth();
        attack = 2 + (int)(CR/2);
        defence = 0 + (int)(CR/4);
        name = "Aoblin, the First Goblin";
        expValue = 10 + CR;
        String setList[] = {"a"};
        moveList = setList;
    }
    
    public void generateEliteEnemyType(int level){
        CR = level;
        int enemyIndex = (int)(Math.random()*(3 - 1 + 1) + 1);
        switch (enemyIndex) {
            case 1:
                generateMoe();
                break;
            case 2:  
                generateShoe();
                break;
            case 3:
                generateOrc();
                break;
        }
    }
        
    private void generateMoe(){
        maxHealth = 18 + CR;
        setCurrentHealth();
        attack = 3 + (int)(CR/2);
        defence = 1 + (int)(CR/4);
        name = "Moe, Just Moe";
        expValue = 25 + CR;
        String setList[] = {"a","s"};
        moveList = setList;
    }
    
    private void generateShoe() {
        maxHealth = 20 * (int)(CR);
        setCurrentHealth();
        attack = 2 + CR;
        defence = 0;
        name = "Shoe";
        expValue = 20 + CR*2;
        String setList[] = {"a","m"};
        moveList = setList;
    }
    
    private void generateOrc() {
        maxHealth = 15 + (CR);
        setCurrentHealth();
        attack = 4 + (int)(CR/2);
        defence = 2 + (int)(CR/4);
        name = "Orc Borc";
        expValue = 25 + CR*2;
        String setList[] = {"a","dh"};
        moveList = setList;
    }
    
    //All possible enemy actions as functions
    public void combat(PlayerStats player, Events events, javax.swing.JTextArea eventTextBox) {
        //Used to print actual damage taken
	temp = player.currentHealth;
        player.loseHealth(events.damage(getAttack(), player.getDefence()));
        eventTextBox.append(player.getName()+" takes "+(temp - player.getCurrentHealth())+" damage! \n");
        if (player.currentHealth < 0) {
            player.loseHealth(player.currentHealth);
        }
    }
    
    public void beamHim(Stats player, Events events, javax.swing.JTextArea eventTextBox) {
        temp = player.currentHealth;
        player.loseHealth(events.damage(0,player.getDefence()));
        eventTextBox.append(player.getName() + " Gets Domed. \n");
        eventTextBox.append(player.getName()+" takes "+(temp - player.getCurrentHealth())+" damage! \n");
    }
    
    public void Slap(PlayerStats player, Events events, javax.swing.JTextArea eventTextBox){
        temp = player.currentHealth;
        player.loseHealth(events.damage((attack)+CR,player.getDefence()));
        eventTextBox.append(player.getName() + " Gets smacked upside the head. \n");
    }
    
    public void Mexico(PlayerStats player, Events events, javax.swing.JTextArea eventTextBox){
        temp = player.currentHealth;
        player.loseHealth(events.damage(6,player.getDefence()));
        eventTextBox.append("The shoe takes off its shoe and beats you. \n");
        eventTextBox.append(player.getName()+" takes "+(temp - player.getCurrentHealth())+" damage! \n");
    }
    
    //Function made to simplify actionDo code
    private String actionChoose() {
        return moveList[rand.nextInt(moveList.length)];
    }
    
    public void actionDo(PlayerStats player, Events events, javax.swing.JTextArea eventTextBox){
        switch(actionChoose()){
	//Corresponding attack of string executed
            case "a":
                combat(player, events, eventTextBox);
                break;
            case "dh":
                beamHim(player, events, eventTextBox);
                break;
            case "m":
                Mexico(player, events, eventTextBox);
                break;
            case "s":
                Slap(player, events, eventTextBox);
                break;
        }
    }
}

//Checks status effects with both starting as false.
//Applied to stats class so both enemies and player has independent version of the it
Boolean[] statusEffect = {false, false}
public void statusCheck(PlayerStats player, Events events, javax.swing.JTextArea eventTextBox) {
    //For loop checks the condition of each status effect, you can be on fire and buffed at the same time
    for (int i = 0; i < 2; i++){
        if (statusEffect[i] == true){
            switch(i){
                case 0:
                    buff = (int)(attack * 0.3);
                    if (buff < 0) {
                        buff = 1;
                    }   
                    break;
                case 1:
                    temp = player.currentHealth;
                    loseHealth((int)(maxHealth * 0.02 + 0.6));
                    eventTextBox.append(name +" is on fire and takes "+(temp - player.getCurrentHealth())+" damage! \n");
                    break;
            }      
            }
        }
    }
    	//Updated enemy types v.2
        public void generateLesserEnemyType(int level){
        CR = level;
	//Random generator for random enemies
        int enemyIndex = (int)(Math.random()*(4 - 1 + 1) + 1);
        switch (enemyIndex) {
            case 1:
                generateMoblin();
                break;
            case 2:  
                generateKobold();
                break;
            case 3:
                generateAoblin();
                break;
        }

    }
    
    public void generateEliteEnemyType(int level){
        CR = level;
        int enemyIndex = (int)(Math.random()*(3 - 1 + 1) + 1);
        switch (enemyIndex) {
            case 1:
                generateMinotaur();
                break;
            case 2:  
                generateBigHand();
                break;
            case 3:
                generateOrc();
                break;
        }
    }
    
    public void generateBossEnemyType(int level){
        CR = level;
        int enemyIndex = (int)(Math.random()*(3 - 1 + 1) + 1);
        switch (enemyIndex) {
            case 1:
                generateJohnEvil();
                break;
            case 2:  
                generateTheGodlin();
                break;
            case 3:
                generateDragon();
                break;
        }
    }
    
    // v v Store of every enemy v v
    
    private void generateMoblin(){
    //CR = levels meaning enemies get stronger throughout the game
        maxHealth = 10 + CR;
        setCurrentHealth();
        attack = 3 + (int)(CR/2);
        defence = 1 + (int)(CR/4);
        name = "Moblin";
        expValue = 12 + CR;
	//Made attacks full instead of initials for readability
	//The probability can still be altered by adding the same attack multiple times
        String setList[] = {"attack","domehim"};
	//Never found a better way to do this
        moveList = setList;
    }
    
    private void generateKobold(){
        maxHealth = 5 + CR/2;
        setCurrentHealth();
        attack = 2 + (int)(CR);
        defence = 1 + (int)(CR/4);
        name = "Kobold";
        expValue = 8 + CR;
        String setList[] = {"attack","domehim"};
        moveList = setList;
    }
    
    private void generateMinotaur() {
        maxHealth = 40 + CR;
        setCurrentHealth();
        attack = 3 + (int)(CR);
        defence = (int)(CR/4);
        name = "Minotaur";
        expValue = 20 + (int)(CR * 1.5);
        String setList[] = {"attack","charge"};
        moveList = setList;        
    }
    
    private void generateJohnEvil(){
        maxHealth = (int)(75 * CR/3);
        setCurrentHealth();
        attack = 10 + (int)(CR/2);
        defence = 1 + (int)(CR/2);
        name = "John Evil, the Dark One";
        expValue = 120 + CR;
        String setList[] = {"magicattack","doom"};
        moveList = setList;
    }
    
    private void generateTheGodlin() {
        maxHealth = (int)(100 * CR/4);
        setCurrentHealth();
        attack = 15 + (int)(CR/2);
        defence = 1 + CR;
        name = "Godlin, the Second Elden Lord";
        expValue = 70 + CR;
        String setList[] = {"attack","axe"};
        moveList = setList;
    }
    
    private void generateAoblin() {
        maxHealth = 8 + (int)(CR/2);
        setCurrentHealth();
        attack = 2 + (int)(CR/2);
        defence = 0 + (int)(CR/4);
        name = "Aoblin, the First Goblin";
        expValue = 10 + CR;
        String setList[] = {"attack"};
        moveList = setList;
    }
    
    private void generateDragon(){
        maxHealth = (int)(100 * CR/3);
        setCurrentHealth();
        attack = 8 + CR;
        defence = 2 + (CR);
        name = "Dragon";
        expValue = 90 + CR;
        String setList[] = {"attack","breathefire"};
        moveList = setList;
    }
    
    private void generateBigHand() {
        maxHealth = 20 + (int)(CR)*2;
        setCurrentHealth();
        attack = 3 + CR;
        defence = 0;
        name = "Big Hand";
        expValue = 20 + CR*2;
        String setList[] = {"attack","slap"};
        moveList = setList;
    }
    
    private void generateOrc() {
        maxHealth = 15 + (CR);
        setCurrentHealth();
        attack = 4 + (int)(CR/2);
        defence = 2 + (int)(CR/4);
        name = "Orc";
        expValue = 25 + CR*2;
        String setList[] = {"attack","axe"};
        moveList = setList;
    }
    
    //Store of every attack
    //Base attack usuable by every enemy
    public void combat(PlayerStats player, Events events, javax.swing.JTextArea eventTextBox) {
        temp = player.currentHealth;
        player.loseHealth(events.damage(getAttack(), player.getDefence()));
        eventTextBox.append(player.getName()+" takes "+(temp - player.getCurrentHealth())+" damage! \n");
        if (player.currentHealth < 0) {
            player.loseHealth(player.currentHealth);
        }
    }
    
    public void axe(PlayerStats player, Events events, javax.swing.JTextArea eventTextBox) {
        temp = player.currentHealth;
        player.loseHealth(events.damage((int)(attack * 1.5), player.getDefence()));
        eventTextBox.append(name + " swings it's axe wildly. \n");
        eventTextBox.append(player.getName()+" takes "+(temp - player.getCurrentHealth())+" damage! \n");
    }
    
    public void charge(PlayerStats player, Events events, javax.swing.JTextArea eventTextBox) {
        temp = player.currentHealth;
        player.loseHealth(events.damage(attack-1, player.getDefence()));
        eventTextBox.append(name + " charges at you. \n");
        eventTextBox.append(player.getName()+" takes "+(temp - player.getCurrentHealth())+" damage! \n");       
    }
    
    public void beamHim(Stats player, Events events, javax.swing.JTextArea eventTextBox) {
        temp = player.currentHealth;
        player.loseHealth(events.damage(2 + (attack/4),player.getDefence()));
        eventTextBox.append(player.getName() + " gets beamed in the back of the head. \n");
        eventTextBox.append(player.getName()+" takes "+(temp - player.getCurrentHealth())+" damage! \n");
    }
    
    public void slap(PlayerStats player, Events events, javax.swing.JTextArea eventTextBox){
        temp = player.currentHealth;
        player.loseHealth(events.damage((attack)+CR,player.getDefence()));
        eventTextBox.append(name + " smacks you upside the head. \n");
        eventTextBox.append(player.getName()+" takes "+(temp - player.getCurrentHealth())+" damage! \n");
    }
    
    public void breatheFire(PlayerStats player, Events events, javax.swing.JTextArea eventTextBox){
        temp = player.currentHealth;
        player.loseHealth(events.damage(attack,(int)(player.getDefence()*0.75)));
        eventTextBox.append(name + " breathes fire! \n");
        player.statusEffect[1] = true;
        eventTextBox.append(player.getName()+" takes "+(temp - player.getCurrentHealth())+" damage! \n");
    }
    
    public void doom(PlayerStats player, Events events, javax.swing.JTextArea eventTextBox) {
        temp = player.currentHealth;
        player.loseHealth(events.damage(5*CR, player.getDefence()));
        eventTextBox.append("John Evil conjurs some bad juju. \n");
        eventTextBox.append(player.getName()+" takes "+(temp - player.getCurrentHealth())+" damage! \n");
    }
    
    private void magicAttack(PlayerStats player, Events events, javax.swing.JTextArea eventTextBox) {
        temp = player.currentHealth;
	//Effects of attacks can be altered, Eg. magicAttack can ignore defence
        player.loseHealth(events.damage(attack, 0));
        eventTextBox.append("The shoe takes off its shoe and beats you. \n");
        eventTextBox.append(player.getName()+" takes "+(temp - player.getCurrentHealth())+" damage! \n");
    }
    
    private String actionChoose() {
        return moveList[rand.nextInt(moveList.length)];
    }
    
    //Still pretty small considering a considerable increase to number of attacks
    public void actionDo(PlayerStats player, Events events, javax.swing.JTextArea eventTextBox){
        switch(actionChoose()){
            case "attack":
                combat(player, events, eventTextBox);
                break;
            case "domehim":
                beamHim(player, events, eventTextBox);
                break;
            case "axe":
                axe(player, events, eventTextBox);
                break;
            case "breathefire":
                breatheFire(player, events, eventTextBox);
                break;
            case "slap":
                slap(player, events, eventTextBox);
                break;
            case "doom":
                doom(player, events, eventTextBox);
                break;
            case "magicattack":
                magicAttack(player, events, eventTextBox);
                break;
            case "charge":
                charge(player, events, eventTextBox);
                break;
        }
    }
    
